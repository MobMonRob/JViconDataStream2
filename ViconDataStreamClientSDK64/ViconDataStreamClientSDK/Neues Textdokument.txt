%include "std_string.i"

//start typemaping 
%typemap(jni) std::string *INOUT, std::string &INOUT %{jobjectArray%}
%typemap(jtype) std::string *INOUT, std::string &INOUT "java.lang.String[]"
%typemap(jstype) std::string *INOUT, std::string &INOUT "java.lang.String[]"
%typemap(javain) std::string *INOUT, std::string &INOUT "$javainput"

%typemap(in) std::string *INOUT (std::string strTemp ), std::string &INOUT (std::string strTemp ) {
  if (!$input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
    return $null;
  }
  if (JCALL1(GetArrayLength, jenv, $input) == 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
    return $null;
  }

  jobject oInput = JCALL2(GetObjectArrayElement, jenv, $input, 0); 
  if ( NULL != oInput ) {
    jstring sInput = static_cast<jstring>( oInput );

    const char * $1_pstr = (const char *)jenv->GetStringUTFChars(sInput, 0); 
    if (!$1_pstr) return $null;
    strTemp.assign( $1_pstr );
    jenv->ReleaseStringUTFChars( sInput, $1_pstr);  
  }

  $1 = &strTemp;
}

%typemap(freearg) std::string *INOUT, std::string &INOUT ""

%typemap(argout) std::string *INOUT, std::string &INOUT
{ 
  jstring jStrTemp = jenv->NewStringUTF( strTemp$argnum.c_str() );
  JCALL3(SetObjectArrayElement, jenv, $input, 0, jStrTemp ); 
}
%apply std::string &INOUT { std::string & xyzzy };
//end typemaping






//define new typemap
     %typemap(jni) unsigned char* BUFFER "jobject"
     %typemap(jtype) unsigned char* BUFFER "java.nio.ByteBuffer"
     %typemap(jstype) unsigned char* BUFFER "java.nio.ByteBuffer"
     %typemap(javain,
           pre="    assert $javainput.isDirect() : \"Buffer must be allocated direct.\";") unsigned char* BUFFER "$javainput"
     %typemap(javaout) unsigned char* BUFFER {
         return $jnicall;
     }
     %typemap(in) unsigned char* BUFFER {
       $1 = (unsigned char*) jenv->GetDirectBufferAddress($input);
       if ($1 == NULL) {
         SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of direct buffer. Buffer must be allocated direct.");
       }
     }
     %typemap(memberin) unsigned char* BUFFER {
       if ($input) {
         $1 = $input;
       } else {
         $1 = 0;
       }
     }
     %typemap(freearg) unsigned char* BUFFER ""
//define end

    %apply unsigned char* BUFFER {unsigned char* image_buffer}